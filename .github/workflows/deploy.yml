name: Deploy to EC2 via Docker Hub

on:
  push:
    branches:
      - main # 當程式碼推送到 main 分支時觸發此工作流程

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 在最新的 Ubuntu 虛擬機上運行此任務

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # 檢出 GitHub 儲存庫的程式碼
      with:
        fetch-depth: 0

    # --- Node.js 設定和 Tailwind CSS 編譯步驟 (保持不變) ---
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Node.js dependencies
      run: npm install
      working-directory: ${{ github.workspace }}

    - name: Compile Tailwind CSS
      run: npm run build:css
      working-directory: ${{ github.workspace }}

    # --- Docker 登入、建構與推送 ---
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image to Docker Hub
      uses: docker/build-push-action@v5
      with:
        context: . # 確保 Docker 建構時使用整個專案目錄作為上下文
        push: true
        tags: cokehuang/air_quality_monitor:latest
        platforms: linux/amd64

    # ----------------------------------------------------
    # 這是修正的關鍵！新增這兩個步驟來同步設定檔到 EC2
    # ----------------------------------------------------
    - name: Copy docker-compose.yml to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "docker-compose.yml"
        target: "~/air_quality_monitor/"

    - name: Copy nginx configs to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "nginx/"
        target: "~/air_quality_monitor/"
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "Connecting to EC2 and deploying..."
          cd ~/air_quality_monitor

          # --- 動態生成 .env 檔案 ---
          echo "Generating .env file on EC2..."
          cat << EOF > .env
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          EPA_AQI_API_KEY=${{ secrets.EPA_AQI_API_KEY }}
          LINE_LOGIN_CHANNEL_ID=${{ secrets.LINE_LOGIN_CHANNEL_ID }}
          LINE_LOGIN_CHANNEL_SECRET=${{ secrets.LINE_LOGIN_CHANNEL_SECRET }}
          LINE_MESSAGING_CHANNEL_ACCESS_TOKEN=${{ secrets.LINE_MESSAGING_CHANNEL_ACCESS_TOKEN }}
          LINE_MESSAGING_CHANNEL_SECRET=${{ secrets.LINE_MESSAGING_CHANNEL_SECRET }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          EOF
          echo "--- Content of generated .env file: ---"
          cat .env
          echo "---------------------------------------"

          # --- 調整憑證權限 (保持不變) ---
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          sudo chmod 755 /etc/letsencrypt/live/
          sudo chmod 755 /etc/letsencrypt/live/ab000641.site/
          sudo chmod 644 /etc/letsencrypt/live/ab000641.site/fullchain.pem
          sudo chmod 644 /etc/letsencrypt/live/ab000641.site/privkey.pem
          sudo chmod 644 /etc/letsencrypt/options-ssl-nginx.conf
          sudo chmod 644 /etc/letsencrypt/ssl-dhparams.pem
          echo "Certificate permissions adjusted."

          # 停止並移除舊的容器和相關資源
          docker-compose down --volumes --rmi all --remove-orphans

          # 拉取最新的 Docker 映像
          docker-compose pull
      
          # 啟動新的容器
          docker-compose up -d
          echo "Deployment complete."

          # 檢查服務狀態和日誌
          docker-compose ps
          docker-compose logs nginx
          docker-compose logs web

      timeout-minutes: 10