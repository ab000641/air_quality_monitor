name: Deploy to EC2 via Docker Hub

on:
  push:
    branches:
      - main # 當程式碼推送到 main 分支時觸發此工作流程

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 在最新的 Ubuntu 虛擬機上運行此任務

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # 檢出 GitHub 儲存庫的程式碼

    # --- 新增：Node.js 設定和 Tailwind CSS 編譯步驟 ---
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20' # 指定 Node.js 版本，與您之前使用的 Node 20 保持一致

    - name: Install Node.js dependencies
      run: npm install
      working-directory: ${{ github.workspace }} # 確保在專案根目錄執行 npm install

    - name: Compile Tailwind CSS
      run: npm run build:css # 現在我們執行 package.json 中定義的腳本
      working-directory: ${{ github.workspace }} # 確保在專案根目錄執行 npm run

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image to Docker Hub
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: cokehuang/air_quality_monitor:latest # 您的 Docker Hub 用戶名/映像名稱:latest

    - name: Copy deployment files to EC2
      uses: appleboy/scp-action@master # 使用 scp-action 進行檔案傳輸
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "docker-compose.yml,.env,nginx/"
        target: "~/air_quality_monitor/" # 這是目標路徑在 EC2 上的路徑

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master # 一個常用的 SSH Action，用於在遠端執行命令
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "Connecting to EC2 and deploying..."
          cd ~/air_quality_monitor

          # --- 新增詳細診斷步驟：在 Docker Compose 啟動前檢查檔案狀態和內容 ---
          echo "--- Diagnostic: Checking Nginx config files on EC2 ---"
          echo "Listing contents of ~/air_quality_monitor/nginx/conf.d/:"
          ls -l ~/air_quality_monitor/nginx/conf.d/
          echo ""
          echo "Content of ~/air_quality_monitor/nginx/conf.d/air_quality_monitor.conf:"
          cat ~/air_quality_monitor/nginx/conf.d/air_quality_monitor.conf
          echo "--- End of Diagnostic ---"
          # ------------------------------------------------------------------

          # 登入 Docker Hub
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

          # 調整 Let's Encrypt 憑證的權限 (保持這一步，以防萬一權限問題再次出現)
          echo "Adjusting Let's Encrypt certificate permissions..."
          sudo chmod 755 /etc/letsencrypt/live/
          sudo chmod 755 /etc/letsencrypt/live/ab000641.site/
          sudo chmod 644 /etc/letsencrypt/live/ab000641.site/fullchain.pem
          sudo chmod 644 /etc/letsencrypt/live/ab000641.site/privkey.pem
          sudo chmod 644 /etc/letsencrypt/options-ssl-nginx.conf
          sudo chmod 644 /etc/letsencrypt/ssl-dhparams.pem
          echo "Certificate permissions adjusted."

          # 停止並移除舊的容器和相關資源
          docker-compose down --volumes --rmi all --remove-orphans

          # 拉取最新的 Docker 映像
          docker-compose pull
          
          # 啟動新的容器
          docker-compose up -d
          echo "Deployment complete."

          # 檢查服務狀態和日誌
          docker-compose ps
          docker-compose logs nginx # 檢查 Nginx 容器日誌
          docker-compose logs web # 檢查 Flask 容器日誌